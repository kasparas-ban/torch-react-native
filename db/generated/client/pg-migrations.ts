export default [
  {
    "statements": [
      "CREATE TYPE item_type_enum AS ENUM (\n 'TASK',\n 'GOAL',\n 'DREAM'\n)",
      "CREATE TYPE item_priority_enum AS ENUM (\n 'LOW',\n 'MEDIUM',\n 'HIGH'\n)",
      "CREATE TYPE item_period_enum AS ENUM (\n 'WEEK',\n 'DAY',\n 'MONTH'\n)",
      "CREATE TYPE item_status_enum AS ENUM (\n 'ACTIVE',\n 'COMPLETED',\n 'ARCHIVED'\n)",
      "CREATE TABLE items (\n    item_id character varying NOT NULL,\n    user_id character varying NOT NULL,\n    title character varying NOT NULL,\n    item_type item_type_enum,\n    target_date date,\n    item_priority item_priority_enum,\n    duration integer,\n    time_spent integer,\n    rec_times integer,\n    rec_period item_period_enum,\n    rec_progress integer,\n    rec_updated_at timestamp without time zone,\n    parent_id character varying,\n    item_status item_status_enum,\n    updated_at timestamp without time zone,\n    created_at timestamp without time zone,\n    CONSTRAINT items_pkey PRIMARY KEY (item_id)\n)",
      "CREATE INDEX idx_user_id ON public.items USING btree (user_id)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'items', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_items_primarykey ON \"public\".\"items\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_items_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"item_id\" IS DISTINCT FROM NEW.\"item_id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column item_id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_items_primarykey\n  BEFORE UPDATE ON \"public\".\"items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_items_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_items_into_oplog ON \"public\".\"items\";",
      "    CREATE OR REPLACE FUNCTION insert_public_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'items',\n            'INSERT',\n            json_strip_nulls(json_build_object('item_id', new.\"item_id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'duration', new.\"duration\", 'item_id', new.\"item_id\", 'item_priority', new.\"item_priority\", 'item_status', new.\"item_status\", 'item_type', new.\"item_type\", 'parent_id', new.\"parent_id\", 'rec_period', new.\"rec_period\", 'rec_progress', new.\"rec_progress\", 'rec_times', new.\"rec_times\", 'rec_updated_at', new.\"rec_updated_at\", 'target_date', new.\"target_date\", 'time_spent', new.\"time_spent\", 'title', new.\"title\", 'updated_at', new.\"updated_at\", 'user_id', new.\"user_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_items_into_oplog\n  AFTER INSERT ON \"public\".\"items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_items_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_items_into_oplog ON \"public\".\"items\";",
      "    CREATE OR REPLACE FUNCTION update_public_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'items',\n            'UPDATE',\n            json_strip_nulls(json_build_object('item_id', new.\"item_id\")),\n            jsonb_build_object('created_at', new.\"created_at\", 'duration', new.\"duration\", 'item_id', new.\"item_id\", 'item_priority', new.\"item_priority\", 'item_status', new.\"item_status\", 'item_type', new.\"item_type\", 'parent_id', new.\"parent_id\", 'rec_period', new.\"rec_period\", 'rec_progress', new.\"rec_progress\", 'rec_times', new.\"rec_times\", 'rec_updated_at', new.\"rec_updated_at\", 'target_date', new.\"target_date\", 'time_spent', new.\"time_spent\", 'title', new.\"title\", 'updated_at', new.\"updated_at\", 'user_id', new.\"user_id\"),\n            jsonb_build_object('created_at', old.\"created_at\", 'duration', old.\"duration\", 'item_id', old.\"item_id\", 'item_priority', old.\"item_priority\", 'item_status', old.\"item_status\", 'item_type', old.\"item_type\", 'parent_id', old.\"parent_id\", 'rec_period', old.\"rec_period\", 'rec_progress', old.\"rec_progress\", 'rec_times', old.\"rec_times\", 'rec_updated_at', old.\"rec_updated_at\", 'target_date', old.\"target_date\", 'time_spent', old.\"time_spent\", 'title', old.\"title\", 'updated_at', old.\"updated_at\", 'user_id', old.\"user_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_items_into_oplog\n  AFTER UPDATE ON \"public\".\"items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_items_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_items_into_oplog ON \"public\".\"items\";",
      "    CREATE OR REPLACE FUNCTION delete_public_items_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'items';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'items',\n            'DELETE',\n            json_strip_nulls(json_build_object('item_id', old.\"item_id\")),\n            NULL,\n            jsonb_build_object('created_at', old.\"created_at\", 'duration', old.\"duration\", 'item_id', old.\"item_id\", 'item_priority', old.\"item_priority\", 'item_status', old.\"item_status\", 'item_type', old.\"item_type\", 'parent_id', old.\"parent_id\", 'rec_period', old.\"rec_period\", 'rec_progress', old.\"rec_progress\", 'rec_times', old.\"rec_times\", 'rec_updated_at', old.\"rec_updated_at\", 'target_date', old.\"target_date\", 'time_spent', old.\"time_spent\", 'title', old.\"title\", 'updated_at', old.\"updated_at\", 'user_id', old.\"user_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_items_into_oplog\n  AFTER DELETE ON \"public\".\"items\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_items_into_oplog_function();"
    ],
    "version": "1"
  }
]